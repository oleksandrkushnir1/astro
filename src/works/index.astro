---
// src/pages/works/index.astro
import Layout from '../../layouts/Layout.astro';
import { createDirectus, rest, readItems } from '@directus/sdk';
import type { DirectusSchema } from '../../lib/directus-schema';

// 1. Definisci lo schema TypeScript
type MySchema = DirectusSchema & {
  works: {
    id: string;
    title: string;
    description: string;
    image: {
      id: string;
      width: number;
      height: number;
    };
    creator: {
      id: string;
      user: {
        first_name: string;
        last_name: string;
      };
    };
    published_date: string;
    status: string;
  };
};

// 2. Configura il client Directus
const directus = createDirectus<MySchema>(import.meta.env.PUBLIC_DIRECTUS_URL)
  .with(rest());

interface Props {
  works: MySchema['works'][];
}

// 3. Genera i percorsi statici
export async function getStaticPaths() {
  try {
    const works = await directus.request(
      readItems('works', {
        fields: ['id'],
        filter: { status: { _eq: 'published' } },
        sort: ['-published_date']
      })
    );

    return works.map((work) => ({
      params: { id: work.id },
      props: { work } // Passa i dati direttamente qui se necessario
    }));
  } catch (error) {
    console.error('Error fetching works:', error);
    return [];
  }
}

// 4. Fetch dati per la pagina
const works = await directus.request(
  readItems('works', {
    fields: [
      'id',
      'title',
      'description',
      'image.id',
      'image.width',
      'image.height',
      'creator.id',
      'creator.user.first_name',
      'creator.user.last_name',
      'published_date'
    ],
    filter: { status: { _eq: 'published' } },
    sort: ['-published_date']
  })
).catch((error) => {
  console.error("Error fetching works:", error);
  return [];
});

// 5. Gestione errori
if (!works || works.length === 0) {
  return <Layout title="Not Found"><h1>No works found</h1></Layout>;
}
---

<Layout title="All Works">
  <h1>All Works</h1>

  <ul class="works-list">
    {works.map((work) => (
      <li class="work-item">
        <article>
          <a href={`/works/${work.id}`}>
            {work.image && (
              <img
                src={`${import.meta.env.PUBLIC_DIRECTUS_URL}/assets/${work.image.id}?width=400`}
                alt={work.title}
                width={400}
                height={Math.round((400 / work.image.width) * work.image.height)}
                loading="lazy"
                decoding="async"
              />
            )}
            <h2>{work.title}</h2>
          </a>
          
          <div class="creator-info">
            <p>Created by: 
              <a href={`/creators/${work.creator.id}`}>
                {work.creator.user.first_name} {work.creator.user.last_name}
              </a>
            </p>
            <time datetime={work.published_date}>
              {new Date(work.published_date).toLocaleDateString()}
            </time>
          </div>

          {work.description && (
            <p class="description">{work.description.substring(0, 100)}...</p>
          )}
        </article>
      </li>
    ))}
  </ul>
</Layout>

<style>
  .works-list {
    display: grid;
    gap: 2rem;
    padding: 0;
    list-style: none;
  }

  .work-item {
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1.5rem;
    transition: transform 0.2s;
  }

  .work-item:hover {
    transform: translateY(-2px);
  }

  .work-item img {
    border-radius: 4px;
    margin-bottom: 1rem;
    aspect-ratio: 16/9;
    object-fit: cover;
  }

  .creator-info {
    margin: 1rem 0;
    font-size: 0.9rem;
    color: #4b5563;
  }

  .description {
    color: #374151;
    line-height: 1.6;
  }
</style>